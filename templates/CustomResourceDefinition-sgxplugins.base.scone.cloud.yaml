---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: {{.Release.Namespace}}/scone-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.0
  name: sgxplugins.base.scone.cloud
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: scone-webhook-service
          namespace: {{.Release.Namespace}}
          path: /convert
      conversionReviewVersions:
      - v1
  group: base.scone.cloud
  names:
    kind: SGXPlugin
    listKind: SGXPluginList
    plural: sgxplugins
    shortNames:
    - sgx
    singular: sgxplugin
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: The state of this SGXPlugin
      jsonPath: .status.state
      name: Status
      type: string
    - description: The number of nodes on which the plugin should be running
      jsonPath: .status.desiredReplicas
      name: Desired
      type: string
    - description: The number of nodes where the plugin is running
      jsonPath: .status.readyReplicas
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: SGXPlugin is the Schema for the sgxplugins API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SGXPluginSpec defines the desired state of SGXPlugin
            properties:
              autoUpdate:
                description: If set to `true`, the controller will check the registry periodically for image digest changes and trigger rolling updates of the CR pods. This assumes that the image has something like semantic versioning in place.
                type: boolean
              capacitySGXPods:
                description: 'The maximum number of SGX devices per Kubernetes node, Default: capacity pods per node, minimum: 1, maximum: 10000'
                maximum: 10000
                minimum: 1
                type: integer
              image:
                description: 'The image to use as SGXPlugin image. Default: registry.scontain.com/scone.cloud/sgx-plugin'
                minLength: 0
                type: string
              imagePullPolicy:
                description: 'The policy to indicate when the sgxplugin image should be pulled from the registry. Default: Always'
                enum:
                - Always
                - Never
                - IfNotPresent
                type: string
              imagePullSecrets:
                description: 'ImagePullSecrets for SGXPlugin containers. This reflects directly on the underlying DaemonSet. NOTE: the current implementation considers only the first valid secret, even if multiple are supported.'
                items:
                  description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                type: array
              namespace:
                description: The namespace in which the plugin should be running. Must exist.
                type: string
              nodeSelector:
                additionalProperties:
                  type: string
                description: 'NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node''s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                type: object
              reinstallOnFatal:
                description: 'If set to true the scone operator will try to recover from what it believes to be fatal errors by reistalling the service. Resinstalling the service causes a disruption in the availability of the service. Default: False'
                type: boolean
              resources:
                description: Resources allows specifying requests for and limits on the resource usage of the plugin
                properties:
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
            type: object
          status:
            description: SGXPluginStatus defines the observed state of SGXPlugin
            properties:
              availableSGXDevices:
                description: The number of SGX devices that are allocatable but not used
                minimum: -1
                type: integer
              availableSGXDevicesPerNode:
                additionalProperties:
                  type: integer
                type: object
              capacitySGXDevices:
                description: The total number of SGX devices that can be allocated by pods
                minimum: -1
                type: integer
              capacitySGXDevicesPerNode:
                additionalProperties:
                  type: integer
                type: object
              conditions:
                description: conditions describing the state of the plugin
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              desiredReplicas:
                description: the number of the desired replicas
                minimum: -1
                type: integer
              readyReplicas:
                description: the number of replicas that are available
                minimum: -1
                type: integer
              sgxDeviceAlert:
                additionalProperties:
                  type: integer
                description: the number of nodes on which the available device count is 0 (per device kind)
                type: object
              sgxReplicaAlert:
                description: the number of the desired replicas not running
                minimum: -1
                type: integer
              state:
                description: The state of the SGXPlugin
                enum:
                - HEALTHY
                - PENDING
                - UNHEALTHY
                type: string
              usedSGXDevices:
                description: The number of pods that got access to a SGX device
                minimum: -1
                type: integer
              usedSGXDevicesPerNode:
                additionalProperties:
                  type: integer
                type: object
            required:
            - availableSGXDevicesPerNode
            - capacitySGXDevicesPerNode
            - state
            - usedSGXDevicesPerNode
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}